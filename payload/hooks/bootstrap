#!/bin/bash
#
# This bootstrap file assumes a stock Linux OS distro. It bootstraps the system
# with Puppet and related utilities. Because this process can take several
# minutes, in some instances it can make sense to run it once and capture the
# end state (ami, box, etc). This script will check to see if it has already
# run, and, if so, will only populate Facter and not run any other steps.
#
# Assumptions:
# - A base OS install including bash is present
# - Cloudlet payload is present
# - We can connect to the internet
# - We are on a supported OS (Amazon Linux, RHEL, CentOS, Ubuntu, Debian)
prog="bootstrap"

set -e
PATH=/bin:/usr/bin:/sbin:/usr/sbin
export TMPDIR=/var/tmp

n_payload_dir=${NEPHO_NephoPayloadDir-"/var/lib/nepho"}
n_log_dir=${NEPHO_NephoLogDir-"/var/log/nepho"}
setup_puppet=${NEPHO_SetupPuppet-"True"}
update_pkgs=${NEPHO_UpdatePackages-"False"}
puppet_bootstrap_repo=${NEPHO_PuppetBootstrapRepo-"http://raw.github.com/hashicorp/puppet-bootstrap/master"}

mkdir -p ${n_log_dir}
log="${n_log_dir}/${prog}.log"

# Pretty print informational and error messages
function message() {
  case $1 in
    fail ) echo -e "\n\033[0m${prog}: \033[1;31m${2}\033[0m" ;;
    info ) echo -e "\n\033[0m${prog}: \033[1;34m${2}\033[0m" ;;
  esac

  echo "  [${1}] ${2}" >> "${log}"
}

function detect_os() {
  if [[ -f /etc/debian_version ]]; then
    [[ "$(lsb_release -i -s 2>/dev/null)" == "Ubuntu" ]] && OS="ubuntu"
    [[ "$(lsb_release -i -s 2>/dev/null)" == "Debian" ]] && OS="debian"
  elif [[ -f /etc/redhat-release ]]; then
    [[ $(grep -i "release 6" /etc/redhat-release) ]] && OS="rhel6"
    [[ $(grep -i "release 5" /etc/redhat-release) ]] && OS="rhel5"
  elif [[ -f /etc/system-release ]]; then
    OS="amazon"
  fi

  if [[ "x$OS" == "x" ]]; then
    message fail "Unsupported OS. Aborting bootstrap!"
    exit 1
  else
    message info "Identified operating system as ${OS}"
  fi
}

function update_packages() {
  message info "Updating packages (this may take a while)"
  case $OS in
    amazon|rhel5|rhel6)
      yum -y -q update >> "${log}" 2>&1
      ;;
    debian|ubuntu)
      apt-get -y -q upgrade >> "${log}" 2>&1
      ;;
    default)
      message fail "Unsupported OS, aborting bootstrap."
      exit 1
      ;;
  esac
}

function setup_puppet() {
  # Enable ec2_* facts in VPC environments
  # See: http://projects.puppetlabs.com/issues/7559
  message info "Enabling EC2 facts for VPCs"
  mkdir -p $(ruby -e 'puts $LOAD_PATH.first')/facter
  curl -O https://gist.githubusercontent.com/agperson/8696051/raw/10bf5c3e5e6452c82dc6edc03ebad22be283f906/ec2_vpc.rb > $(ruby -e 'puts $LOAD_PATH.first')/facter/ec2_vpc.rb

  case $OS in
    amazon)
      # Disable priorities plugin, which favors Amazon repos
      message info "Disabling yum priorities plugin"
      echo -e "[main]\nenabled = 0" > /etc/yum/pluginconf.d/priorities.conf

      # Bootstrap Puppet
      message info "Bootstrapping Puppet"
      sh -c "$(curl --retry 3 --fail --silent --show-error --location ${puppet_bootstrap_repo}/centos_6_x.sh)" >> "${log}"

      message info "Enabling yum priorities plugin"
      echo -e "[main]\nenabled = 1" > /etc/yum/pluginconf.d/priorities.conf

      # Fix hostname if it is not properly set
      if [[ ! -f /etc/hostname ]]; then
        message info "Fixing hostname"
        hostname $(/usr/bin/facter -p ec2_hostname)
        puppet resource host $(facter -p ec2_hostname) ensure=present ip=$(facter -p ec2_local_ipv4) > /dev/null
      fi
      ;;
    debian|ubuntu)
      # Remove older/unexpected Puppet installations
      apt-get remove -y -q puppet facter hiera >> "${log}" 2>&1

      # update_rubygems is installed in /usr/local/bin
      PATH=${PATH}:/usr/local/bin

      message info "Install curl"
      apt-get install -y -q curl >> "${log}" 2>&1

      # Bootstrap Puppet
      message info "Bootstrapping Puppet"
      sh -c "$(curl --retry 3 --fail --silent --show-error --location ${puppet_bootstrap_repo}/${OS}.sh)" >> "${log}" 2>&1
      ;;
    rhel5)
      # Remove older/unexpected Puppet installations
      yum remove -y -q puppet facter hiera >> "${log}" 2>&1

      # Bootstrap Puppet
      message info "Bootstrapping Puppet"
      sh -c "$(curl --retry 3 --fail --silent --show-error --location ${puppet_bootstrap_repo}/centos_5_x.sh)" >> "${log}" 2>&1
      ;;
    rhel6)
      # Remove older/unexpected Puppet installations
      yum remove -y -q puppet facter hiera >> "${log}" 2>&1

      # Bootstrap Puppet
      message info "Bootstrapping Puppet"
      sh -c "$(curl --retry 3 --fail --silent --show-error --location ${puppet_bootstrap_repo}/centos_6_x.sh)" >> "${log}" 2>&1
      ;;
    default)
      message fail "Unsupported OS, aborting bootstrap."
      exit 1
      ;;
  esac
}

function install_prereqs() {
  case $OS in
    amazon)
      # Fix for sporatic Amazon Linux RubyGems SSL errors
      # http://railsapps.github.io/openssl-certificate-verify-failed.html
      if [ ! -f /root/.gemrc ]; then
        message info "Disabling SSL verify mode for RubyGems"
        echo ':ssl_verify_mode: 0' >> /root/.gemrc
      fi

      # Some badly-behaved modules require this, and its not bad to have
      puppet resource package redhat-lsb-core ensure=installed >>"$log" 2>&1
      ;;
    rhel5|rhel6)
      message info "No additional package configuration for rhel"
      puppet resource package ruby-devel ensure=installed >>"$log" 2>&1
      ;;
    debian|ubuntu)
      message info "No additional package configuration for debian/ubuntu"
      ;;
    default)
      message fail "Unsupported OS, aborting bootstrap."
      exit 1
      ;;
  esac

  message info "Installing prerequisites"
  puppet resource package git              ensure=installed >>"$log" 2>&1
  puppet resource package rubygems         ensure=installed >>"$log" 2>&1
  puppet resource package librarian-puppet ensure=installed provider=gem >>"$log" 2>&1

  if [[ "$(facter ec2_instance_id)" ]]; then
    message info "Install AWS CLI tools"
    puppet resource package python-pip       ensure=installed >>"$log" 2>&1
    puppet resource package awscli           ensure=installed provider=pip >>"$log" 2>&1
  fi
}

function setup_hiera() {
  if [[ -f "${n_payload_dir}/hiera.yaml" ]]; then
    message info "Symlinking cloudlet hiera config into default locations"
    rm -f /etc/hiera.yaml /etc/puppet/hiera.yaml
    ln -s "${n_payload_dir}/hiera.yaml" /etc/hiera.yaml
    ln -s "${n_payload_dir}/hiera.yaml" /etc/puppet/hiera.yaml
  fi
}

function populate_facter() {
  # Populate data from NEPHO_ environment variables
  message info "Populating facter data from environment variables"
  mkdir -p /etc/facter/facts.d
  ruby -e "require 'yaml'" -e "print Hash[ENV.select { |k,v| k =~ /^NEPHO_/ }.map { |i| [ i.first, i.last] } ].to_yaml" > /etc/facter/facts.d/nepho.yaml
}

# Make sure we are in the directory of this script
cd $(dirname "${0}")

message info "Beginning run at $(date '+%F %T')"

# Make sure that this script has not already run successfully
if [[ -f /.nepho-bootstrap ]]; then
  message fail "Bootstrap has already run on this instance."
else
  detect_os
  [[ "${update_pkgs}" != "False" ]] && update_packages
  [[ "${setup_puppet}" != "False" ]] && setup_puppet
  setup_hiera
  install_prereqs
  date > /.nepho-bootstrap
fi

populate_facter

message info "Run complete at $(date '+%F %T')"

# vim: set ft=sh ts=2 sw=2 ei:
